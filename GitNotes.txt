//////////////////////////////
// Version Control with Git //
//////////////////////////////
1. In the project directory, first initialize git with your terminal by typing "git init". This creates a hidden git
folder that tracks changes. You will not see this folder in explorer but you can see it by typing "ls -a" in your terminal.


2. To keep track of changes of files in our directory, we must add the file to our staging directory. We can track files
that git is monitoring using the "git status" command. Any file that is green is being tracked by git. To add a file to
the staging directory, we must type "add filename.fileextension." If you have multiple files, you can use "$git add ." to
add everything in the directory to the staging area.

3. When your files are added to the staging area, you can make a commit by typing "$git commit -m "commit message"".
NOTE: It is best practice to write your commit message in present tense, and for all projects these messages should
be somewhat thoughful so if you have to rollback, you'll know exactly where you should roll back to.

4. If you want to revert a change, you can use the command git checkout to rollback to the previous version.

/////////////////////////////////
// Creating a local repository //
/////////////////////////////////
1. When you create a local repository on github, you will be given a unique link which will let you push the files in
your working directory into that local repository. This makes your code availible on github's servers and allows for
pair coding and storage. 
2. To do this in your terminal, after your commits are made, add these two commands:
git remote add origin yourgithublink
NOTE: the origin in this line can be any line, but best practice uses origin by default

then to push your commits:
git push -u origin master
Note: origin much match whatever name you set before, master can be changed as well but means we want to push to our
master branch

///////////////
// gitignore //
///////////////
1. If you have files that you don't want to push into your repository for everyone to see, creating a gitignore file
is very useful. You can create this by running "touch .gitignore" in a terminal in the directory of your project.
Inside this gitignore file, you can add all the file names you dont want to commit (case sensitive) on separate lines.
You must include the filename and extensions.
2. Now when you run git add . and git commit -m "message", these files will not be added.

/////////////
// Cloning //
/////////////
Cloning allows us to pull all the commits and files from a local repository and add it to our working directory.
1. First find the local repository and hover or click on clone. If you hover on clone, you can copy the url of that
local repository
2. In your terminal type: git clone link
3. You will now have the folder and all of its commits on your working directory!
4. Note: you cannot push any changes to the local repository unless you have permission to.

///////////////////////////
// Branching and Merging //
///////////////////////////
Instead of continuing to commit ONLY to our master branch, we can create a side branch and commit to that branch for 
experimental features etc. This side branch lets us try things out and commit to that branch while also working on our
master branch. Perhaps we are making an app and we know which steps we need to take to complete it. We'd make all those
commits to our master branch. Along development, you may want to try a different approach or add new features, you can 
then create a branch to develop these new features experimentally. If you then decide these features are really good, you
can send a merge request to add these changes to our main project.


For large projects you will see lots of branching because the master branch should only contain main features and 
working code. Teams will usually branch to run tests or develop features that could potentially break the master branch
code

1. To add a branch, type "git branch branch-name"
2. To check which branches you have, type "git branch"
3. The asterik points to the branch we currently are at.
4. To switch branches, type "git checkout branchname."
5. In different branches we can change files and commit those changes without changing our master branch files! This means
we can work on copies of files from our master branch without ever touching our master branch!
6. New files created or modified in the master branch will not get added to the branch after the branch is already
created.

MERGING
If you like the changes you made on your branch,
1. Navigate to your master branch
2. type git merge branchname
3. You will now be in VIM which lets you add a merge message if you'd like, if not type esc, :q! enter to quit
4. Now all the changes from our branch will be merged onto our master branch. Our new branch will still exist but now
all changes we made will overwrite the master branch files

You can do this manually on the github website. Create a new repo, make sure to add a README file 

To do this, just go to your local github repo, click on branch and create a new branch. 
1. You can click new pull request to go to the comparison page which will show any changes you made between the 
branches. You can then decide if you want to create a pull request which will merge your two branches.

//////////////////////
// Forking and Pull //
//////////////////////
If you want to work in a team of programmers, forking and pulling are required.

Forking - Allows you to take a copy of someone's remote repository and change code in it and push that to
their remote repository. If that someone is not trusted, they can send you a pull request
which you can review to accept any changes. This is like a suggestion. Only people with given 
permissions have permission to directly edit your code. This is used in teams. This is called a pull request
because the person with the original repository is pulling the edited files over to the original. After
accepting the pull request, you can merge the repository.

To Fork:
1. Look for the repo you want to fork
2. click fork on the top right, this gives you a copy of the remote repository and places it into your 
github account as a new repository.

- You can now make changes and commit them 
- The person that owns the original file, will see a branch of any changes you made along with who made
those changes in their network tab of the repo you forked.
- Now you can create a new pull request, add a note of what you've done and why you think what you've done
is good then send the request. 
- The person that owns the repository will see a open pull request under the repo you forked and can
choose to merge the pull request. They can also look at all commits and changes and leave comments.




