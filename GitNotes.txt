//////////////////////////////
// Version Control with Git //
//////////////////////////////
1. In the project directory, first initialize git with your terminal by typing "git init". This creates a hidden git
folder that tracks changes. You will not see this folder in explorer but you can see it by typing "ls -a" in your terminal.


2. To keep track of changes of files in our directory, we must add the file to our staging directory. We can track files
that git is monitoring using the "git status" command. Any file that is green is being tracked by git. To add a file to
the staging directory, we must type "add filename.fileextension." If you have multiple files, you can use "$git add ." to
add everything in the directory to the staging area.

3. When your files are added to the staging area, you can make a commit by typing "$git commit -m "commit message"".
NOTE: It is best practice to write your commit message in present tense, and for all projects these messages should
be somewhat thoughful so if you have to rollback, you'll know exactly where you should roll back to.

4. If you want to revert a change, you can use the command git checkout to rollback to the previous version.

/////////////////////////////////
// Creating a local repository //
/////////////////////////////////
1. When you create a local repository on github, you will be given a unique link which will let you push the files in
your working directory into that local repository. This makes your code availible on github's servers and allows for
pair coding and storage. 
2. To do this in your terminal, after your commits are made, add these two commands:
git remote add origin yourgithublink
NOTE: the origin in this line can be any line, but best practice uses origin by default

then to push your commits:
git push -u origin master
Note: origin much match whatever name you set before, master can be changed as well but means we want to push to our
master branch

///////////////
// gitignore //
///////////////
1. If you have files that you don't want to push into your repository for everyone to see, creating a gitignore file
is very useful. You can create this by running "touch .gitignore" in a terminal in the directory of your project.
Inside this gitignore file, you can add all the file names you dont want to commit (case sensitive) on separate lines.
You must include the filename and extensions.
2. Now when you run git add . and git commit -m "message", these files will not be added.

/////////////
// Cloning //
/////////////
Cloning allows us to pull all the commits and files from a local repository and add it to our working directory.
1. First find the local repository and hover or click on clone. If you hover on clone, you can copy the url of that
local repository
2. In your terminal type: git clone link
3. You will now have the folder and all of its commits on your working directory!
4. Note: you cannot push any changes to the local repository unless you have permission to.

///////////////////////////
// Branching and Merging //
///////////////////////////
Instead of continuing to commit ONLY to our master branch, we can create a side branch and commit to that branch for 
experimental features etc. This side branch lets us try things out and commit to that branch while also working on our
master branch. Perhaps we are making an app and we know which steps we need to take to complete it. We'd make all those
commits to our master branch. Along development, you may want to try a different approach or add new features, you can 
then create a branch to develop these new features experimentally. If you then decide these features are really good, you
can send a merge request to add these changes to our main project.


For large projects you will see lots of branching because the master branch should only contain main features and 
working code. Teams will usually branch to run tests or develop features that could potentially break the master branch
code

1. To add a branch, type "git branch branch-name"
2. To check which branches you have, type "git branch"
3. The asterik points to the branch we currently are at.
4. To switch branches, type "git checkout branchname."
5. In different branches we can change files and commit those changes without changing our master branch files! This means
we can work on copies of files from our master branch without ever touching our master branch!

