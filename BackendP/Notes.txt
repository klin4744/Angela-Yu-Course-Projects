What is the Backend?
-The backend consists of things like a server (which serves data), a database which stores data, and a application which will determine how a web application works

For example: if we go to Eventbrite and book a ticket,the information gets saved on Eventbrite's database. In the future, if you log back in to Eventbrite, the data is retrieved from the database.

Restuarant Analogy - The client-side or what the user sees and interacts with is the restaurant. The kitchen is our server, it "sends" information, and finally the larder stores food or data. You can store data on the front end but users will be able to get your data this way and makes grabbing data MUCH slower.

Backend Technologies
PHP (Cake PHP), Ruby (Rails), Java (Spring), Node JS (Express), Python, ASP .NET
These frameworks will reduce repetition and save alot of lines!

//////////////
// Node JS //
/////////////
Node JS allows us to create a backend using Javascript! This saves us time from learning a new language. Node is also super fast and allows us to create really scalable websites. Ebay, Twitter, Netflix, Uber, etc use Node js. 

Without Node JS, we can only reach stuff within the browser.

Node JS allows us to take JavaScript out of the browser and interact with hardware inside the computer. It allows JavaScript to create desktop applications, etc.

Node JS can also run on a server, we can execute javascript code to process a request!

on gitBash

1. pwd - Print working directory, prints the path of the directory you are currently in.
2. use cd to navigate to the folder you want to build in
3. We can now use node to run a JavaScript file inside our terminal node filename, this means use node to run our file

REPL - Read Evaluation Print Loop
- Allows you to execute code in chunks, one line at a time!
- To use this just type node in terminal which puts us in REPL 
- Inside REPL, we can run code directly
- We can also use tab here to auto complete, hitting it twice shows u all the commands you can run at the moment following an uncompleted command. Typing . shows all the methods of that command 
to exit REPL or anything, type CTRL C
- Clear will clear the console


// Using Native Node Modules
// Nodejs.org/api shows us node's documentation. There are a plethora of methods that allow us to access the file system. To use a module, we must first require it
const fs = require("fs"); for example, gives us access to the file system module

// Using External Node Modules 
// To use an External module that is not bundled in Nodejs by default, you can use the Node Package Manager (npm) to incorporate other modules into your code! npm is bundled with node so we do not have to install it separately.
// Running npm init will initialize npm 
 // First name your package, press enter to use default 
 // Then declare a version
 // Then add a description
 // Then you will be asked for an entry point, this is you JS file (index.js by default).
 // This creates a package.JSON file which is a description of our npm files, now when we install packages, they will be added to this file as a dependency of our project!
 // to install a module npm i module_name --save
// This module will now be added as a dependency to our package.JSON file!

// JSON is simply a file that stores and structures data 

/////////////
// Express //
/////////////
Node JS allows javascript to interact with the computer outside the browser (in a server). This means we can create desktop applications with node (like with electron).

 Express is made for web developers.

Look at Node folder for sample server creation with Node and Express.

Everytime we make a new project we want to:
1. Create a new directory
2. cd into that directory 
3. Create a new JS file with touch 
4. Open that js file with code start/open Code file_name.js, alternatively, if you want to open the current directory in VSC, type Code .
5. initialize node with node init 
6. install express if you're using it: npm i express --save
 --save adds express adds express into our package.JSON's dependencies for us, we don't have to do this anymore, node will do it for us 
 7. Require express :
    const express = require("express")
    const app = express();


const express = require("express");
// App generally refers to the express module in bigger apps
const app = express();
// the listen method takes a port and will listen for any HTTP requests sent to out server
// A port is like a channel that we're tuning to.
// app.listen(3000); // Here we are listening for requests to port 3000, with this our server is created!

// We can also add a callback function to the listen method to notify us that our server on the specified port is running
app.listen(3000, function() {
  console.log("Server started on port 3000");
});

// If we actually navigate to port 3000 at this point, we send a get request to our server which currently has nothing and thus will return the error Cannot GET/

// localhost:3000/ <- the / is our root, when we navigate to a website like https://google.com, we are sending a GET request to google's servers which returns the html, css, and js files that allow us to interact with google

// we usually use req for request, and res for response
app.get("/", function(req, res) {
  // the send method sends something back for the specificed get request
  // You can send html in this as well
  res.send("<h1>Hello</h1>");
});
// the get function takes two parameters, the first parameter is the local of the get request; ("/") refers to our root directory (homepage). When that request happens, we can trigger a callback function which takes two parameters: request and response. This callback function runs and does something when someone sends a get request to our home root

// We can create more routes if we want
app.get("/contact", function(req, res) {
  res.send("Contact me at: kevin.lin.2@stonybrook.edu");
});
// If someone tries to go to our contact page, we will respond with this instead
app.get("/about", function(req, res) {
  res.send("My name is Kevin Lin and this is my website");
});

// If you dont want to manually start and stop your server everytime you change something in this file, you can install nodemon which will refresh your server is any code is changed. npm i -g nodemon. Once nodemon is installed with the -g flag it can be used across all projects

// With nodemon installed, start your server with nodemon server.js instead of npm server.js